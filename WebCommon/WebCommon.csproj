<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{CC52D198-E0BC-40ED-9ACB-D08070033263}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>MultiStageBuild.WebCommon</RootNamespace>
    <AssemblyName>MultiStageBuild.WebCommon</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="MultiStageBuild.Common, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\MultiStageBuild.Common.1.0.0-snapshot\lib\net45\MultiStageBuild.Common.dll</HintPath>
    </Reference>
    <Reference Include="Newtonsoft.Json">
      <HintPath>..\packages\Newtonsoft.Json.5.0.6\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="WebCommonClass1.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" />
	<!--
	 | Targets for Jenkins
	 |-->
	<!-- Update snapshot packages -->
	<Target Name="UpdateSnapshotPackages" BeforeTargets="RestorePackages">
		<Message Text="UpdateSnapshotPackages" />
		<ItemGroup>
			<PackagesToDelete Include="$([System.IO.Directory]::GetDirectories(&quot;$(SolutionDir)\packages&quot;, &quot;*-snapshot&quot;))" />
		</ItemGroup>
		<RemoveDir Directories="@(PackagesToDelete)" />
	</Target>
	<!-- Intercept "BuildPackage" Target -->
	<PropertyGroup>
		<PackageVersion>1.0.0</PackageVersion>
		<IsPrerelease Condition="'$(IsPrerelease)' == ''">true</IsPrerelease>
	</PropertyGroup>
	<Target Name="PrepareBuildPackage" BeforeTargets="BuildPackage">
		<PropertyGroup>
			<BuildCommand Condition="$(IsPrerelease)">$(BuildCommand) -version $(PackageVersion)-snapshot</BuildCommand>
			<BuildCommand Condition="!$(IsPrerelease)">$(BuildCommand) -version $(PackageVersion)</BuildCommand>
		</PropertyGroup>
	</Target>
	<!-- Push packages -->
	<PropertyGroup>
		<EnablePushPackage Condition="'$(EnablePushPackage)' == ''">false</EnablePushPackage>
	</PropertyGroup>
	<Target Name="PushPackage" AfterTargets="BuildPackage" DependsOnTargets="CleanOldPackages" Condition="$(EnablePushPackage)">
		<CallTarget Targets="_PushPackageToLocal" Condition="Exists('$(PushPackageTo)')" />
		<CallTarget Targets="_PushPackageToRemote" Condition="!Exists('$(PushPackageTo)')" />
	</Target>
	<Target Name="_PushPackageToLocal">
		<ItemGroup>
			<PackageFiles Include="$(PackageOutputDir)\*.nupkg" />
		</ItemGroup>
		<Copy SourceFiles="@(PackageFiles)" DestinationFolder="$(PushPackageTo)" />
	</Target>
	<Target Name="_PushPackageToRemote">
		<!-- TODO -->
	</Target>
	<Target Name="CleanOldPackages" BeforeTargets="BuildPackage">
		<ItemGroup>
			<PackageFilesToDelete Include="$(PackageOutputDir)\*.nupkg" />
		</ItemGroup>
		<Delete Files="@(PackageFilesToDelete)" />
	</Target>
</Project>